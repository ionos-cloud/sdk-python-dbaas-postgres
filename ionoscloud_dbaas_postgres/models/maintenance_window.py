# coding: utf-8

"""
    IONOS DBaaS PostgreSQL REST API

    An enterprise-grade Database is provided as a Service (DBaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.  The API allows you to create additional PostgreSQL database clusters or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud_dbaas_postgres.configuration import Configuration


class MaintenanceWindow(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {

        'time': 'str',

        'day_of_the_week': 'DayOfTheWeek',
    }

    attribute_map = {

        'time': 'time',

        'day_of_the_week': 'dayOfTheWeek',
    }

    def __init__(self, time=None, day_of_the_week=None, local_vars_configuration=None):  # noqa: E501
        """MaintenanceWindow - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._time = None
        self._day_of_the_week = None
        self.discriminator = None

        self.time = time
        self.day_of_the_week = day_of_the_week


    @property
    def time(self):
        """Gets the time of this MaintenanceWindow.  # noqa: E501

        Start of the maintenance window in UTC time.  # noqa: E501

        :return: The time of this MaintenanceWindow.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this MaintenanceWindow.

        Start of the maintenance window in UTC time.  # noqa: E501

        :param time: The time of this MaintenanceWindow.  # noqa: E501
        :type time: str
        """
        if self.local_vars_configuration.client_side_validation and time is None:  # noqa: E501
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def day_of_the_week(self):
        """Gets the day_of_the_week of this MaintenanceWindow.  # noqa: E501


        :return: The day_of_the_week of this MaintenanceWindow.  # noqa: E501
        :rtype: DayOfTheWeek
        """
        return self._day_of_the_week

    @day_of_the_week.setter
    def day_of_the_week(self, day_of_the_week):
        """Sets the day_of_the_week of this MaintenanceWindow.


        :param day_of_the_week: The day_of_the_week of this MaintenanceWindow.  # noqa: E501
        :type day_of_the_week: DayOfTheWeek
        """
        if self.local_vars_configuration.client_side_validation and day_of_the_week is None:  # noqa: E501
            raise ValueError("Invalid value for `day_of_the_week`, must not be `None`")  # noqa: E501

        self._day_of_the_week = day_of_the_week
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaintenanceWindow):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MaintenanceWindow):
            return True

        return self.to_dict() != other.to_dict()
